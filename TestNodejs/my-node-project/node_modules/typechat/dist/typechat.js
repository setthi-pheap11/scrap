"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createJsonTranslator = void 0;
const result_1 = require("./result");
/**
 * Creates an object that can translate natural language requests into JSON objects of the given type.
 * The specified type argument `T` must be the same type as `typeName` in the given `schema`. The function
 * creates a `TypeChatJsonValidator<T>` and stores it in the `validator` property of the returned instance.
 * @param model The language model to use for translating requests into JSON.
 * @param validator A string containing the TypeScript source code for the JSON schema.
 * @param typeName The name of the JSON target type in the schema.
 * @returns A `TypeChatJsonTranslator<T>` instance.
 */
function createJsonTranslator(model, validator) {
    const typeChat = {
        model,
        validator,
        attemptRepair: true,
        stripNulls: false,
        createRequestPrompt,
        createRepairPrompt,
        validateInstance: result_1.success,
        translate
    };
    return typeChat;
    function createRequestPrompt(request) {
        return `You are a service that translates user requests into JSON objects of type "${validator.getTypeName()}" according to the following TypeScript definitions:\n` +
            `\`\`\`\n${validator.getSchemaText()}\`\`\`\n` +
            `The following is a user request:\n` +
            `"""\n${request}\n"""\n` +
            `The following is the user request translated into a JSON object with 2 spaces of indentation and no properties with the value undefined:\n`;
    }
    function createRepairPrompt(validationError) {
        return `The JSON object is invalid for the following reason:\n` +
            `"""\n${validationError}\n"""\n` +
            `The following is a revised JSON object:\n`;
    }
    async function translate(request, promptPreamble) {
        const preamble = typeof promptPreamble === "string" ? [{ role: "user", content: promptPreamble }] : promptPreamble ?? [];
        let prompt = [...preamble, { role: "user", content: typeChat.createRequestPrompt(request) }];
        let attemptRepair = typeChat.attemptRepair;
        while (true) {
            const response = await model.complete(prompt);
            if (!response.success) {
                return response;
            }
            const responseText = response.data;
            const startIndex = responseText.indexOf("{");
            const endIndex = responseText.lastIndexOf("}");
            if (!(startIndex >= 0 && endIndex > startIndex)) {
                return (0, result_1.error)(`Response is not JSON:\n${responseText}`);
            }
            const jsonText = responseText.slice(startIndex, endIndex + 1);
            let jsonObject;
            try {
                jsonObject = JSON.parse(jsonText);
            }
            catch (e) {
                return (0, result_1.error)(e instanceof SyntaxError ? e.message : "JSON parse error");
            }
            if (typeChat.stripNulls) {
                stripNulls(jsonObject);
            }
            const schemaValidation = validator.validate(jsonObject);
            const validation = schemaValidation.success ? typeChat.validateInstance(schemaValidation.data) : schemaValidation;
            if (validation.success) {
                return validation;
            }
            if (!attemptRepair) {
                return (0, result_1.error)(`JSON validation failed: ${validation.message}\n${jsonText}`);
            }
            prompt.push({ role: "assistant", content: responseText });
            prompt.push({ role: "user", content: typeChat.createRepairPrompt(validation.message) });
            attemptRepair = false;
        }
    }
}
exports.createJsonTranslator = createJsonTranslator;
/**
 * Recursively delete properties with null values from the given object. This function assumes there are no
 * circular references in the object.
 * @param obj The object in which to strip null valued properties.
 */
function stripNulls(obj) {
    let keysToDelete;
    for (const k in obj) {
        const value = obj[k];
        if (value === null) {
            (keysToDelete ??= []).push(k);
        }
        else {
            if (Array.isArray(value)) {
                if (value.some(x => x === null)) {
                    obj[k] = value.filter(x => x !== null);
                }
            }
            if (typeof value === "object") {
                stripNulls(value);
            }
        }
    }
    if (keysToDelete) {
        for (const k of keysToDelete) {
            delete obj[k];
        }
    }
}
