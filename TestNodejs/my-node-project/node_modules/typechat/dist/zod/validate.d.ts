import { z } from "zod";
import { TypeChatJsonValidator } from '../typechat';
/**
 * Returns a JSON validator for a given Zod schema. The schema is supplied as an object where each property provides
 * a name for an associated Zod type. The `validate` method of the returned object validates a JSON object against the
 * supplied schema, the `getSchemaText` method obtains the TypeScript source text representation of the schema, and
 * the `getTypeName` method obtains the name of the given target type in the schema.
 * @param schema A schema object where each property provides a name for an associated Zod type.
 * @param targetType The name in the schema of the target type for JSON validation.
 * @returns A `TypeChatJsonValidator<z.TypeOf<T[K]>>`, where T is the schema and K is the target type name.
 */
export declare function createZodJsonValidator<T extends Record<string, z.ZodType>, K extends keyof T & string>(schema: T, typeName: K): TypeChatJsonValidator<z.TypeOf<T[K]>>;
/**
 * Returns the TypeScript source code corresponding to a Zod schema. The schema is supplied as an object where each
 * property provides a name for an associated Zod type. The return value is a string containing the TypeScript source
 * code corresponding to the schema. Each property of the schema object is emitted as a named `interface` or `type`
 * declaration for the associated type and is referenced by that name in the emitted type declarations. Other types
 * referenced in the schema are emitted in their structural form.
 * @param schema A schema object where each property provides a name for an associated Zod type.
 * @returns The TypeScript source code corresponding to the schema.
 */
export declare function getZodSchemaAsTypeScript(schema: Record<string, z.ZodType>): string;
